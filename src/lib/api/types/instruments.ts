/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/instruments/cryptocurrencies': {
    /** Retrieve a set of cryptocurrencies given an array of one or more symbols. */
    get: operations['getInstrumentsCryptocurrencies'];
  };
  '/instruments/cryptocurrencies/{symbol}': {
    /** Retrieve a cryptocurrency given a symbol. */
    get: operations['getInstrumentsCryptocurrenciesSymbol'];
  };
  '/instruments/equities': {
    /** Returns a set of equity definitions given an array of one or more symbols */
    get: operations['getInstrumentsEquities'];
  };
  '/instruments/equities/active': {
    /** Returns all active equities in a paginated fashion */
    get: operations['getInstrumentsEquitiesActive'];
  };
  '/instruments/equities/{symbol}': {
    /** Returns a single equity definition for the provided symbol */
    get: operations['getInstrumentsEquitiesSymbol'];
  };
  '/instruments/equity-options': {
    /** Returns a set of equity options given one or more symbols */
    get: operations['getInstrumentsEquityOptions'];
  };
  '/instruments/equity-options/{symbol}': {
    /** Get equity option by symbol */
    get: operations['getInstrumentsEquityOptionsSymbol'];
  };
  '/instruments/futures': {
    /** Returns a set of outright futures given an array of one or more symbols. */
    get: operations['getInstrumentsFutures'];
  };
  '/instruments/futures/{symbol}': {
    /** Returns an outright future given a symbol. */
    get: operations['getInstrumentsFuturesSymbol'];
  };
  '/instruments/future-option-products': {
    /** Returns metadata for all supported future option products */
    get: operations['getInstrumentsFutureOptionProducts'];
  };
  '/instruments/future-option-products/{exchange}/{root_symbol}': {
    /** Get a future option product by exchange and root symbol */
    get: operations['getInstrumentsFutureOptionProductsExchangeRootSymbol'];
  };
  '/instruments/future-option-products/{root_symbol}': {
    /** Get a future option product by root symbol */
    get: operations['getInstrumentsFutureOptionProductsRootSymbol'];
  };
  '/instruments/future-options': {
    /**
     * Returns a set of future option(s) given an array of one or more symbols.
     *         Uses TW symbology: `[./ESZ9 EW4U9 190927P2975]`
     */
    get: operations['getInstrumentsFutureOptions'];
  };
  '/instruments/future-options/{symbol}': {
    /** Returns a future option given a symbol. Uses TW symbology: `./ESZ9 EW4U9 190927P2975` */
    get: operations['getInstrumentsFutureOptionsSymbol'];
  };
  '/instruments/future-products': {
    /** Returns metadata for all supported futures products */
    get: operations['getInstrumentsFutureProducts'];
  };
  '/instruments/future-products/{exchange}/{code}': {
    /** Get future product from exchange and product code */
    get: operations['getInstrumentsFutureProductsExchangeCode'];
  };
  '/instruments/quantity-decimal-precisions': {
    /** Retrieve all quantity decimal precisions. */
    get: operations['getInstrumentsQuantityDecimalPrecisions'];
  };
  '/instruments/warrants': {
    /** Returns a set of warrant definitions that can be filtered by parameters */
    get: operations['getInstrumentsWarrants'];
  };
  '/instruments/warrants/{symbol}': {
    /** Returns a single warrant definition for the provided symbol */
    get: operations['getInstrumentsWarrantsSymbol'];
  };
  '/futures-option-chains/{symbol}': {
    /** Returns a futures option chain given a futures product code, i.e. `ES` */
    get: operations['getFuturesOptionChainsSymbol'];
  };
  '/futures-option-chains/{symbol}/nested': {
    /** Returns a futures option chain given a futures product code in a nested form to minimize redundant processing */
    get: operations['getFuturesOptionChainsSymbolNested'];
  };
  '/option-chains/{symbol}': {
    /** Returns an option chain given an underlying symbol, i.e. `AAPL` */
    get: operations['getOptionChainsSymbol'];
  };
  '/option-chains/{symbol}/compact': {
    /** Returns an option chain given an underlying symbol, i.e. `AAPL` in a compact form to minimize content size */
    get: operations['getOptionChainsSymbolCompact'];
  };
  '/option-chains/{symbol}/nested': {
    /**
     * Returns an option chain given an underlying symbol, \
     *           i.e. `AAPL` in a nested form to minimize redundant processing
     */
    get: operations['getOptionChainsSymbolNested'];
  };
}

export interface definitions {
  /** @description Cryptocurrency model */
  Cryptocurrency: {
    /** Format: int32 */
    id?: number;
    active?: boolean;
    description?: string;
    'instrument-type'?: string;
    'is-closing-only'?: boolean;
    'short-description'?: string;
    'streamer-symbol'?: string;
    symbol?: string;
    /** Format: double */
    'tick-size'?: number;
  };
  /** @description Equity model */
  Equity: {
    active?: boolean;
    /** Format: double */
    'borrow-rate'?: number;
    'bypass-manual-review'?: boolean;
    'country-of-incorporation'?: string;
    'country-of-taxation'?: string;
    description?: string;
    /** Format: date-time */
    'halted-at'?: string;
    'instrument-sub-type'?: string;
    'instrument-type'?: string;
    'is-closing-only'?: boolean;
    'is-etf'?: boolean;
    'is-fractional-quantity-eligible'?: boolean;
    'is-illiquid'?: boolean;
    'is-index'?: boolean;
    'is-options-closing-only'?: boolean;
    lendability?: string;
    'listed-market'?: string;
    'market-time-instrument-collection'?: string;
    'overnight-trading-permitted'?: boolean;
    'short-description'?: string;
    /** Format: date-time */
    'stops-trading-at'?: string;
    'streamer-symbol'?: string;
    symbol?: string;
    'underlying-product-type'?: string;
    'option-tick-sizes'?: {
      symbol?: string;
      /** Format: double */
      threshold?: number;
      /** Format: double */
      value?: number;
    };
    'tick-sizes'?: {
      symbol?: string;
      /** Format: double */
      threshold?: number;
      /** Format: double */
      value?: number;
    };
  };
  /** @description EquityOption model */
  EquityOption: {
    active?: boolean;
    /** Format: int32 */
    'days-to-expiration'?: number;
    'exercise-style'?: string;
    /** Format: date */
    'expiration-date'?: string;
    'expiration-type'?: string;
    /** Format: date-time */
    'expires-at'?: string;
    /** Format: date-time */
    'halted-at'?: string;
    'instrument-type'?: string;
    'is-closing-only'?: boolean;
    'listed-market'?: string;
    'market-time-instrument-collection'?: string;
    'old-security-number'?: string;
    'option-chain-type'?: string;
    'option-type'?: string;
    'root-symbol'?: string;
    'settlement-type'?: string;
    /** Format: int32 */
    'shares-per-contract'?: number;
    /** Format: date-time */
    'stops-trading-at'?: string;
    'streamer-symbol'?: string;
    /** Format: double */
    'strike-price'?: number;
    symbol?: string;
    'underlying-symbol'?: string;
  };
  /** @description Future model */
  Future: {
    active?: boolean;
    'active-month'?: boolean;
    'back-month-first-calendar-symbol'?: boolean;
    /** Format: date */
    'closing-only-date'?: string;
    /** Format: double */
    'contract-size'?: number;
    /** Format: double */
    'display-factor'?: number;
    exchange?: string;
    'exchange-data'?: { [key: string]: unknown };
    /** Format: date */
    'expiration-date'?: string;
    /** Format: date-time */
    'expires-at'?: string;
    /** Format: date */
    'first-notice-date'?: string;
    'product-group'?: string;
    'is-closing-only'?: boolean;
    /** Format: date */
    'last-trade-date'?: string;
    /** Format: double */
    'main-fraction'?: number;
    'next-active-month'?: boolean;
    /** Format: double */
    'notional-multiplier'?: number;
    'product-code'?: string;
    'roll-target-symbol'?: string;
    'security-id'?: string;
    /** Format: date-time */
    'stops-trading-at'?: string;
    'streamer-exchange-code'?: string;
    'streamer-symbol'?: string;
    /** Format: double */
    'sub-fraction'?: number;
    symbol?: string;
    /** Format: double */
    'tick-size'?: number;
    'is-tradeable'?: boolean;
    'true-underlying-symbol'?: string;
    'future-etf-equivalent'?: {
      /** Format: int32 */
      'share-quantity'?: number;
      symbol?: string;
    };
    'future-product'?: {
      'active-months'?: string;
      'back-month-first-calendar-symbol'?: boolean;
      /** Format: int32 */
      'base-tick'?: number;
      'cash-settled'?: boolean;
      code?: string;
      /** Format: int32 */
      'contract-limit'?: number;
      description?: string;
      /** Format: double */
      'display-factor'?: number;
      exchange?: string;
      'first-notice'?: boolean;
      'listed-months'?: string;
      'market-sector'?: string;
      /** Format: double */
      'notional-multiplier'?: number;
      'price-format'?: string;
      'product-subtype'?: string;
      'product-type'?: string;
      'security-group'?: string;
      'small-notional'?: boolean;
      'streamer-exchange-code'?: string;
      /** Format: int32 */
      'sub-tick'?: number;
      supported?: boolean;
      'root-symbol'?: string;
      /** Format: double */
      'tick-size'?: number;
      'true-underlying-code'?: string;
      'underlying-description'?: string;
      'underlying-identifier'?: string;
    };
    'option-tick-sizes'?: {
      symbol?: string;
      /** Format: double */
      threshold?: number;
      /** Format: double */
      value?: number;
    };
    'spread-tick-sizes'?: {
      symbol?: string;
      /** Format: double */
      threshold?: number;
      /** Format: double */
      value?: number;
    };
    'tick-sizes'?: {
      symbol?: string;
      /** Format: double */
      threshold?: number;
      /** Format: double */
      value?: number;
    };
  };
  /** @description FutureOptionProduct model */
  FutureOptionProduct: {
    'cash-settled'?: boolean;
    code?: string;
    /** Format: double */
    'display-factor'?: number;
    exchange?: string;
    'expiration-type'?: string;
    'is-am-settled'?: boolean;
    'itm-rule'?: string;
    'market-sector'?: string;
    'product-subtype'?: string;
    'product-type'?: string;
    'root-symbol'?: string;
    /** Format: int32 */
    'settlement-delay-days'?: number;
    supported?: boolean;
  };
  /** @description FutureOption model */
  FutureOption: {
    active?: boolean;
    /** Format: int32 */
    'days-to-expiration'?: number;
    /** Format: double */
    'display-factor'?: number;
    exchange?: string;
    'exercise-style'?: string;
    /** Format: date */
    'expiration-date'?: string;
    /** Format: date-time */
    'expires-at'?: string;
    /** Format: double */
    'future-price-ratio'?: number;
    'is-closing-only'?: boolean;
    'is-confirmed'?: boolean;
    'is-exercisable-weekly'?: boolean;
    'is-primary-deliverable'?: boolean;
    'is-vanilla'?: boolean;
    'last-trade-time'?: string;
    /** Format: date */
    'maturity-date'?: string;
    /** Format: double */
    multiplier?: number;
    /** Format: double */
    'notional-value'?: number;
    'option-root-symbol'?: string;
    'option-type'?: string;
    'product-code'?: string;
    'root-symbol'?: string;
    'security-id'?: string;
    'settlement-type'?: string;
    /** Format: date-time */
    'stops-trading-at'?: string;
    'streamer-symbol'?: string;
    /** Format: double */
    'strike-factor'?: number;
    /** Format: double */
    'strike-price'?: number;
    symbol?: string;
    /** Format: double */
    'underlying-count'?: number;
    'underlying-symbol'?: string;
    'future-option-product'?: {
      'cash-settled'?: boolean;
      code?: string;
      /** Format: double */
      'display-factor'?: number;
      exchange?: string;
      'expiration-type'?: string;
      'is-am-settled'?: boolean;
      'itm-rule'?: string;
      'market-sector'?: string;
      'product-subtype'?: string;
      'product-type'?: string;
      'root-symbol'?: string;
      /** Format: int32 */
      'settlement-delay-days'?: number;
      supported?: boolean;
    };
  };
  /** @description FutureProduct model */
  FutureProduct: {
    'active-months'?: string;
    'back-month-first-calendar-symbol'?: boolean;
    /** Format: int32 */
    'base-tick'?: number;
    'cash-settled'?: boolean;
    code?: string;
    /** Format: int32 */
    'contract-limit'?: number;
    description?: string;
    /** Format: double */
    'display-factor'?: number;
    exchange?: string;
    'first-notice'?: boolean;
    'listed-months'?: string;
    'market-sector'?: string;
    /** Format: double */
    'notional-multiplier'?: number;
    'price-format'?: string;
    'product-subtype'?: string;
    'product-type'?: string;
    'security-group'?: string;
    'small-notional'?: boolean;
    'streamer-exchange-code'?: string;
    /** Format: int32 */
    'sub-tick'?: number;
    supported?: boolean;
    'root-symbol'?: string;
    /** Format: double */
    'tick-size'?: number;
    'true-underlying-code'?: string;
    'underlying-description'?: string;
    'underlying-identifier'?: string;
  };
  /** @description QuantityDecimalPrecision model */
  QuantityDecimalPrecision: {
    'instrument-type'?: string;
    /** Format: int32 */
    'minimum-increment-precision'?: number;
    symbol?: string;
    /** Format: int32 */
    value?: number;
  };
  /** @description Warrant model */
  Warrant: {
    active?: boolean;
    cusip?: string;
    description?: string;
    'instrument-type'?: string;
    'is-closing-only'?: boolean;
    'listed-market'?: string;
    symbol?: string;
  };
  /** @description FuturesNestedOptionChainSerializer model */
  FuturesNestedOptionChainSerializer: {
    futures?: {
      symbol?: string;
      'root-symbol'?: string;
      /** Format: date */
      'maturity-date'?: string;
      /** Format: date */
      'expiration-date'?: string;
      /** Format: int32 */
      'days-to-expiration'?: number;
      'active-month'?: boolean;
      'next-active-month'?: boolean;
      /** Format: date-time */
      'stops-trading-at'?: string;
      /** Format: date-time */
      'expires-at'?: string;
    };
    'option-chains'?: {
      'underlying-symbol'?: string;
      'root-symbol'?: string;
      'exercise-style'?: string;
      expirations?: {
        'underlying-symbol'?: string;
        'root-symbol'?: string;
        'option-root-symbol'?: string;
        'option-contract-symbol'?: string;
        asset?: string;
        /** Format: date */
        'expiration-date'?: string;
        /** Format: int32 */
        'days-to-expiration'?: number;
        'expiration-type'?: string;
        'settlement-type'?: string;
        /** Format: double */
        'notional-value'?: number;
        /** Format: double */
        'display-factor'?: number;
        /** Format: double */
        'strike-factor'?: number;
        /** Format: date-time */
        'stops-trading-at'?: string;
        /** Format: date-time */
        'expires-at'?: string;
        'tick-sizes'?: {
          symbol?: string;
          /** Format: double */
          threshold?: number;
          /** Format: double */
          value?: number;
        };
        strikes?: {
          /** Format: double */
          'strike-price'?: number;
          call?: string;
          'call-streamer-symbol'?: string;
          put?: string;
          'put-streamer-symbol'?: string;
        };
      };
    };
  };
  /** @description CompactOptionChainSerializer model */
  CompactOptionChainSerializer: {
    'underlying-symbol'?: string;
    'root-symbol'?: string;
    'option-chain-type'?: string;
    'settlement-type'?: string;
    /** Format: int32 */
    'shares-per-contract'?: number;
    'expiration-type'?: string;
    deliverables?: {
      /** Format: int32 */
      id?: number;
      /** Format: double */
      amount?: number;
      'deliverable-type'?: string;
      description?: string;
      'instrument-type'?: string;
      percent?: string;
      'root-symbol'?: string;
      symbol?: string;
    };
    symbols?: string;
    'streamer-symbols'?: string;
  };
  /** @description NestedOptionChainSerializer model */
  NestedOptionChainSerializer: {
    'underlying-symbol'?: string;
    'root-symbol'?: string;
    'option-chain-type'?: string;
    /** Format: int32 */
    'shares-per-contract'?: number;
    'tick-sizes'?: {
      symbol?: string;
      /** Format: double */
      threshold?: number;
      /** Format: double */
      value?: number;
    };
    deliverables?: {
      /** Format: int32 */
      id?: number;
      /** Format: double */
      amount?: number;
      'deliverable-type'?: string;
      description?: string;
      'instrument-type'?: string;
      percent?: string;
      'root-symbol'?: string;
      symbol?: string;
    };
    expirations?: {
      'expiration-type'?: string;
      /** Format: date */
      'expiration-date'?: string;
      /** Format: int32 */
      'days-to-expiration'?: number;
      'settlement-type'?: string;
      strikes?: {
        /** Format: double */
        'strike-price'?: number;
        call?: string;
        'call-streamer-symbol'?: string;
        put?: string;
        'put-streamer-symbol'?: string;
      };
    };
  };
}

export interface operations {
  /** Retrieve a set of cryptocurrencies given an array of one or more symbols. */
  getInstrumentsCryptocurrencies: {
    parameters: {
      query: {
        /** Symbol(s) (example: symbol[]={value1}&symbol[]={value2}) */
        symbol?: string[];
      };
    };
    responses: {
      /** Retrieve a set of cryptocurrencies given an array of one or more symbols. */
      200: {
        schema: definitions['Cryptocurrency'][];
      };
    };
  };
  /** Retrieve a cryptocurrency given a symbol. */
  getInstrumentsCryptocurrenciesSymbol: {
    parameters: {
      path: {
        /** Symbol */
        symbol: string;
      };
    };
    responses: {
      /** Retrieve a cryptocurrency given a symbol. */
      200: {
        schema: definitions['Cryptocurrency'];
      };
    };
  };
  /** Returns a set of equity definitions given an array of one or more symbols */
  getInstrumentsEquities: {
    parameters: {
      query: {
        /** The symbol of the equity(s), i.e `AAPL` (example: symbol[]={value1}&symbol[]={value2}) */
        symbol?: string[];
        /** Flag indicating if equity is an etf instrument */
        'is-etf'?: boolean;
        /** Flag indicating if equity is an index instrument */
        'is-index'?: boolean;
        /** Lendability */
        lendability?: 'Easy To Borrow' | 'Locate Required' | 'Preborrow';
      };
    };
    responses: {
      /** Returns a set of equity definitions given an array of one or more symbols */
      200: {
        schema: definitions['Equity'][];
      };
    };
  };
  /** Returns all active equities in a paginated fashion */
  getInstrumentsEquitiesActive: {
    parameters: {
      query: {
        'page-offset'?: number;
        'per-page'?: number;
        /** Lendability. i.e. `Easy To Borrow`, `Locate Required` or `Preborrow` */
        lendability?: 'Easy To Borrow' | 'Locate Required' | 'Preborrow';
      };
    };
    responses: {
      /** Returns all active equities in a paginated fashion */
      200: {
        schema: definitions['Equity'][];
      };
    };
  };
  /** Returns a single equity definition for the provided symbol */
  getInstrumentsEquitiesSymbol: {
    parameters: {
      path: {
        /** The symbol of the equity, i.e. `AAPL` */
        symbol: string;
      };
    };
    responses: {
      /** Returns a single equity definition for the provided symbol */
      200: {
        schema: definitions['Equity'];
      };
    };
  };
  /** Returns a set of equity options given one or more symbols */
  getInstrumentsEquityOptions: {
    parameters: {
      query: {
        /**
         * Whether an option is available for trading with the broker.
         *                  Terminology is somewhat misleading as this is generally used to filter non-standard / flex options out.
         */
        active?: boolean;
        /** The symbol of the equity option(s) using OCC Symbology, i.e. `[FB    180629C00200000]` (example: symbol[]={value1}&symbol[]={value2}) */
        symbol?: string[];
        /** Include expired options */
        'with-expired'?: boolean;
      };
    };
    responses: {
      /** Returns a set of equity options given one or more symbols */
      200: {
        schema: definitions['EquityOption'][];
      };
    };
  };
  /** Get equity option by symbol */
  getInstrumentsEquityOptionsSymbol: {
    parameters: {
      path: {
        /** The symbol of the equity option using OCC Symbology, i.e. `FB    180629C00200000` */
        symbol: string;
      };
      query: {
        /**
         * Whether an option is available for trading with the broker.
         *                    Terminology is somewhat misleading as this is generally used to filter non-standard / flex options out.
         */
        active?: boolean;
      };
    };
    responses: {
      /** Get equity option by symbol */
      200: {
        schema: definitions['EquityOption'];
      };
    };
  };
  /** Returns a set of outright futures given an array of one or more symbols. */
  getInstrumentsFutures: {
    parameters: {
      query: {
        /** Name of the exchange for the product. Only used to avoid security id collisions if that is also given. */
        exchange?: string;
        /** If true (defaults to true), only active futures are returned. */
        'only-active-futures'?: boolean;
        /**
         * The product code of the future(s), i.e. `product-code[]=ES&product-code[]=6A`. \
         *                  Ignored if `symbol` parameter is given. (example: product-code[]={value1}&product-code[]={value2})
         */
        'product-code'?: string[];
        /** Exchange-specific ID used for order routing (example: security-id[]={value1}&security-id[]={value2}) */
        'security-id'?: string[];
        /** The symbol of the future(s), i.e. `symbol[]=ESZ9`. Leading forward slash is not required. (example: symbol[]={value1}&symbol[]={value2}) */
        symbol?: string[];
      };
    };
    responses: {
      /** Returns a set of outright futures given an array of one or more symbols. */
      200: {
        schema: definitions['Future'][];
      };
    };
  };
  /** Returns an outright future given a symbol. */
  getInstrumentsFuturesSymbol: {
    parameters: {
      path: {
        /** The symbol of the future, i.e. `ESZ9`. Leading forward slash is not required. */
        symbol: string;
      };
    };
    responses: {
      /** Returns an outright future given a symbol. */
      200: {
        schema: definitions['Future'];
      };
    };
  };
  /** Returns metadata for all supported future option products */
  getInstrumentsFutureOptionProducts: {
    responses: {
      /** Returns metadata for all supported future option products */
      200: {
        schema: definitions['FutureOptionProduct'][];
      };
    };
  };
  /** Get a future option product by exchange and root symbol */
  getInstrumentsFutureOptionProductsExchangeRootSymbol: {
    parameters: {
      path: {
        exchange: string;
        root_symbol: string;
      };
    };
    responses: {
      /** Get a future option product by exchange and root symbol */
      200: {
        schema: definitions['FutureOptionProduct'];
      };
    };
  };
  /** Get a future option product by root symbol */
  getInstrumentsFutureOptionProductsRootSymbol: {
    parameters: {
      path: {
        root_symbol: string;
      };
    };
    responses: {
      /** Get a future option product by root symbol */
      200: {
        schema: definitions['FutureOptionProduct'];
      };
    };
  };
  /**
   * Returns a set of future option(s) given an array of one or more symbols.
   *         Uses TW symbology: `[./ESZ9 EW4U9 190927P2975]`
   */
  getInstrumentsFutureOptions: {
    parameters: {
      query: {
        /** Name of the exchange for the product */
        exchange?: string;
        /** Expiration date */
        'expiration-date'?: string;
        /** Maturity date */
        'maturity-date'?: string;
        /** Future option root, i.e. EW3 or SO */
        'option-root-symbol'?: string;
        /** P(ut) or C(all) */
        'option-type'?: 'C' | 'P';
        /** Exchange-specific ID used for order routing (example: security-id[]={value1}&security-id[]={value2}) */
        'security-id'?: string[];
        /** Strike price using display factor */
        'strike-price'?: number;
        /** The symbol of the future option(s) (example: symbol[]={value1}&symbol[]={value2}) */
        symbol?: string[];
      };
    };
    responses: {
      /**
       * Returns a set of future option(s) given an array of one or more symbols.
       *         Uses TW symbology: `[./ESZ9 EW4U9 190927P2975]`
       */
      200: {
        schema: definitions['FutureOption'][];
      };
    };
  };
  /** Returns a future option given a symbol. Uses TW symbology: `./ESZ9 EW4U9 190927P2975` */
  getInstrumentsFutureOptionsSymbol: {
    parameters: {
      path: {
        /** The symbol of the future option */
        symbol: string;
      };
    };
    responses: {
      /** Returns a future option given a symbol. Uses TW symbology: `./ESZ9 EW4U9 190927P2975` */
      200: {
        schema: definitions['FutureOption'];
      };
    };
  };
  /** Returns metadata for all supported futures products */
  getInstrumentsFutureProducts: {
    responses: {
      /** Returns metadata for all supported futures products */
      200: {
        schema: definitions['FutureProduct'][];
      };
    };
  };
  /** Get future product from exchange and product code */
  getInstrumentsFutureProductsExchangeCode: {
    parameters: {
      path: {
        /** The exchange code */
        exchange: 'CBOED' | 'CFE' | 'CME' | 'SMALLS';
        /** The product code, i.e. `ES` */
        code: string;
      };
    };
    responses: {
      /** Get future product from exchange and product code */
      200: {
        schema: definitions['FutureProduct'];
      };
    };
  };
  /** Retrieve all quantity decimal precisions. */
  getInstrumentsQuantityDecimalPrecisions: {
    responses: {
      /** Retrieve all quantity decimal precisions. */
      200: {
        schema: definitions['QuantityDecimalPrecision'][];
      };
    };
  };
  /** Returns a set of warrant definitions that can be filtered by parameters */
  getInstrumentsWarrants: {
    parameters: {
      query: {
        /** The symbol of the warrant(s), i.e `NKLAW` (example: symbol[]={value1}&symbol[]={value2}) */
        symbol?: string[];
      };
    };
    responses: {
      /** Returns a set of warrant definitions that can be filtered by parameters */
      200: {
        schema: definitions['Warrant'][];
      };
    };
  };
  /** Returns a single warrant definition for the provided symbol */
  getInstrumentsWarrantsSymbol: {
    parameters: {
      path: {
        symbol: string;
      };
    };
    responses: {
      /** Returns a single warrant definition for the provided symbol */
      200: {
        schema: definitions['Warrant'];
      };
    };
  };
  /** Returns a futures option chain given a futures product code, i.e. `ES` */
  getFuturesOptionChainsSymbol: {
    parameters: {
      path: {
        symbol: number;
      };
    };
    responses: {
      /** Returns a futures option chain given a futures product code, i.e. `ES` */
      200: {
        schema: definitions['FutureOption'][];
      };
    };
  };
  /** Returns a futures option chain given a futures product code in a nested form to minimize redundant processing */
  getFuturesOptionChainsSymbolNested: {
    parameters: {
      path: {
        symbol: number;
      };
    };
    responses: {
      /** Returns a futures option chain given a futures product code in a nested form to minimize redundant processing */
      200: {
        schema: definitions['FuturesNestedOptionChainSerializer'];
      };
    };
  };
  /** Returns an option chain given an underlying symbol, i.e. `AAPL` */
  getOptionChainsSymbol: {
    parameters: {
      path: {
        symbol: number;
      };
    };
    responses: {
      /** Returns an option chain given an underlying symbol, i.e. `AAPL` */
      200: {
        schema: definitions['EquityOption'][];
      };
    };
  };
  /** Returns an option chain given an underlying symbol, i.e. `AAPL` in a compact form to minimize content size */
  getOptionChainsSymbolCompact: {
    parameters: {
      path: {
        symbol: number;
      };
    };
    responses: {
      /** Returns an option chain given an underlying symbol, i.e. `AAPL` in a compact form to minimize content size */
      200: {
        schema: definitions['CompactOptionChainSerializer'];
      };
    };
  };
  /**
   * Returns an option chain given an underlying symbol, \
   *           i.e. `AAPL` in a nested form to minimize redundant processing
   */
  getOptionChainsSymbolNested: {
    parameters: {
      path: {
        symbol: number;
      };
    };
    responses: {
      /**
       * Returns an option chain given an underlying symbol, \
       *           i.e. `AAPL` in a nested form to minimize redundant processing
       */
      200: {
        schema: definitions['NestedOptionChainSerializer'];
      };
    };
  };
}

export interface external {}
