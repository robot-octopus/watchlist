/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/public-watchlists': {
    /** Returns a list of all tastyworks watchlists */
    get: operations['getPublicWatchlists'];
  };
  '/public-watchlists/{watchlist_name}': {
    /** Returns a requested tastyworks watchlist */
    get: operations['getPublicWatchlistsWatchlistName'];
  };
  '/watchlists': {
    /** Returns a list of all watchlists for the given account */
    get: operations['getWatchlists'];
    /** Create an account watchlist */
    post: operations['postWatchlists'];
  };
  '/watchlists/{watchlist_name}': {
    /** Returns a requested account watchlist */
    get: operations['getWatchlistsWatchlistName'];
    /** Replace all properties of an account watchlist */
    put: operations['putWatchlistsWatchlistName'];
    /** Delete a watchlist for the given account */
    delete: operations['deleteWatchlistsWatchlistName'];
  };
  '/pairs-watchlists': {
    /** Returns a list of all tastyworks pairs watchlists */
    get: operations['getPairsWatchlists'];
  };
  '/pairs-watchlists/{pairs_watchlist_name}': {
    /** Returns a requested tastyworks pairs watchlist */
    get: operations['getPairsWatchlistsPairsWatchlistName'];
  };
}

export interface definitions {
  /** @description Watchlist model */
  Watchlist: {
    name?: string;
    'watchlist-entries'?: { [key: string]: unknown };
    'cms-id'?: string;
    'group-name'?: string;
    /** Format: int32 */
    'order-index'?: number;
  };
  /** @description Create an account watchlist */
  postWatchlists: {
    /** @description The watchlist name */
    name: string;
    /** @description The group to which this watchlist belongs to */
    'group-name'?: string;
    /**
     * Format: int32
     * @description The order index of the watchlist
     * @default 9999
     */
    'order-index'?: number;
    /** @description The instruments being watched */
    'watchlist-entries': {
      /** @description The instrument symbol */
      symbol: string;
      /** @description The instrument type */
      'instrument-type'?: string;
    }[];
  };
  /** @description Replace all properties of an account watchlist */
  putWatchlistsWatchlistName: {
    /** @description The watchlist name */
    name: string;
    /** @description The group to which this watchlist belongs to */
    'group-name'?: string;
    /**
     * Format: int32
     * @description The order index of the watchlist
     * @default 9999
     */
    'order-index'?: number;
    /** @description The instruments being watched */
    'watchlist-entries': {
      /** @description The instrument symbol */
      symbol: string;
      /** @description The instrument type */
      'instrument-type'?: string;
    }[];
  };
  /** @description PairsWatchlist model */
  PairsWatchlist: {
    name?: string;
    'pairs-equations'?: { [key: string]: unknown };
    /** Format: int32 */
    'order-index'?: number;
  };
}

export interface operations {
  /** Returns a list of all tastyworks watchlists */
  getPublicWatchlists: {
    parameters: {
      query: {
        'counts-only'?: boolean;
      };
    };
    responses: {
      /** Returns a list of all tastyworks watchlists */
      200: {
        schema: definitions['Watchlist'][];
      };
    };
  };
  /** Returns a requested tastyworks watchlist */
  getPublicWatchlistsWatchlistName: {
    parameters: {
      path: {
        watchlist_name: number;
      };
    };
    responses: {
      /** Returns a requested tastyworks watchlist */
      200: {
        schema: definitions['Watchlist'];
      };
    };
  };
  /** Returns a list of all watchlists for the given account */
  getWatchlists: {
    responses: {
      /** Returns a list of all watchlists for the given account */
      200: {
        schema: definitions['Watchlist'][];
      };
    };
  };
  /** Create an account watchlist */
  postWatchlists: {
    parameters: {
      body: {
        postWatchlists: definitions['postWatchlists'];
      };
    };
    responses: {
      /** Create an account watchlist */
      201: {
        schema: definitions['Watchlist'];
      };
    };
  };
  /** Returns a requested account watchlist */
  getWatchlistsWatchlistName: {
    parameters: {
      path: {
        watchlist_name: string;
      };
    };
    responses: {
      /** Returns a requested account watchlist */
      200: {
        schema: definitions['Watchlist'];
      };
    };
  };
  /** Replace all properties of an account watchlist */
  putWatchlistsWatchlistName: {
    parameters: {
      path: {
        watchlist_name: string;
      };
      body: {
        putWatchlistsWatchlistName: definitions['putWatchlistsWatchlistName'];
      };
    };
    responses: {
      /** Replace all properties of an account watchlist */
      200: {
        schema: definitions['Watchlist'];
      };
    };
  };
  /** Delete a watchlist for the given account */
  deleteWatchlistsWatchlistName: {
    parameters: {
      path: {
        watchlist_name: string;
      };
    };
    responses: {
      /** Delete a watchlist for the given account */
      200: {
        schema: definitions['Watchlist'];
      };
    };
  };
  /** Returns a list of all tastyworks pairs watchlists */
  getPairsWatchlists: {
    responses: {
      /** Returns a list of all tastyworks pairs watchlists */
      200: {
        schema: definitions['PairsWatchlist'][];
      };
    };
  };
  /** Returns a requested tastyworks pairs watchlist */
  getPairsWatchlistsPairsWatchlistName: {
    parameters: {
      path: {
        pairs_watchlist_name: number;
      };
    };
    responses: {
      /** Returns a requested tastyworks pairs watchlist */
      200: {
        schema: definitions['PairsWatchlist'];
      };
    };
  };
}

export interface external {}
